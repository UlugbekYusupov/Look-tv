#ifndef CLPlayerListenerProtocol_h
#define CLPlayerListenerProtocol_h

#import "CLThumb.h"
#import "CLPlayerVideoDescription.h"

/*!
 @protocol  CLPlayerListenerProtocol
 
 @brief Player Listener API
 
 @discussion This is a high level listener interface that provides callbacks for events from a video player.
 
 @author castLabs
 @copyright  Copyright Â© 2015 castLabs
 */
@protocol CLPlayerListenerProtocol <NSObject>

/**
 Error that can be generated by the SDK
 */
typedef NS_ENUM(NSInteger, ErrorID)  {
    /// Playback failed because a timeout occurred. It may indicate bad or no Internet connectivity which caused the media not to arrive in time.
	ERROR_DOWNLOAD = -1,
    /// Player has failed to retrieve the decryption key for the current content. It is usually caused by a misconfiguration of the CLDRMConfiguration object.
	ERROR_DRM_ERROR = -2,
    /// Player license is invalid or expired. Please contact support if you see this error unexpectedly. Note that if this error occurs, playback is prevented and the player will stop working
	ERROR_LICENSE = -3,
    /// Opening the stream has failed. It can be thrown in case of an unsupported stream type or malformed stream url.
	ERROR_OPEN_STREAM = -4,
    /// The DRM key for the current content has expired
    ERROR_DRM_LICENSE_EXPIRED = -5,
    ERROR_AUDIO_DECODE_ERROR = -6,
    // The current content is not allowed to play on an external screen
    ERROR_SECOND_SCREEN_DETECTED = -7,
    /// The DRM key for the current content can not be retrieved
    ERROR_DRM_NO_LICENSE = -8,
     // The current content is not allowed to be screen recorded
    ERROR_SCREEN_RECORDING_DETECTED = -9,
    /// License has expired because of too many concurrent usages
	ERROR_DRM_CONCURRENT_STREAMING_EXCEEDED = -10,
    /// License was not found because server returned internal error
    ERROR_DRM_SERVER_INTERNAL_ERROR = -11,
	ERROR_UNKNOWN = -1000,
	ERROR_NO_ERROR = -1001
};

/*!
 States that can be generated by the SDK
*/
typedef NS_ENUM(NSInteger, StateID) {
	STATE_IDLE = 0,			// Player is doing nothing
	STATE_READY = 1,		// Player is ready to play contents
	STATE_PLAYING = 2,		// Player is playing
	STATE_PAUSED = 3,		// Player paused
	STATE_SEEKING = 4,		// Player is seeking
	STATE_STALLED = 5,		// Player can't fetch next portion of data and stalled
	STATE_LOADING = 6,		// Player is loading contents
    STATE_FINISHED = 7,		// Player just finished playback
	STATE_UNKNOWN = -1000,	// The status of player is unknown
};

/*!
 Special events that can be generated by the SDK
 */
typedef NS_ENUM(NSInteger, EventID)  {
    EVENT_LICENSE_LOADED = 100 // Player has successfully loaded the license
};

@optional

/**
 * @brief Called when the player state changes
 *
 * @param newState The new state
 * @param oldState The old state
 * @param data Additional optional params
 *  - for STATE_SEEKING:{seekTo:val} requested seek time in seconds
 */
- (void) onStateChangedTo:(StateID)newState from:(StateID)oldState withData:(NSDictionary*)data;

/**
 * @brief Called when the player state changes
 *
 * @param newState The new state
 * @param oldState The old state
 * @param data Additional optional params
 *  - for STATE_SEEKING:{seekTo:val} requested seek time in seconds
 * @param sender Sender object
 */
- (void) onStateChangedTo:(StateID)newState from:(StateID)oldState withData:(NSDictionary*)data andSender:(id)sender;

/**
 * @brief Called in case of a special event
 *
 * @param eventID The event ID
 */
- (void) onEvent:(EventID) eventID;

/**
 * @brief Called when the video quality changes
 *
 */
- (void) onQualitySwitch:(CLVideoTrackQuality*) quality;

// Called when it's time to display a thumbnail
- (void)onThumbnail:(CLThumb*) thumb;

/**
 * @brief Called when a new auth token is required because the cached one is invalid
 *
 */
- (NSString*) onAuthTokenRequired;

@required

/**
 * @brief Called in case of an error
 *
 * @param errorID The error ID
 * @param message The error description
 */
- (void) onError:(ErrorID) errorID withMessage:(NSString*) message;

@end

#endif /* CLPlayerListenerProtocol_h */
